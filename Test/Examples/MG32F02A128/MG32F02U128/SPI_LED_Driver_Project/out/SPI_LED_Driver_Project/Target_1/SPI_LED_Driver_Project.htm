<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [D:\STM32\Test\Examples\MG32F02A128\MG32F02U128\SPI_LED_Driver_Project\out\SPI_LED_Driver_Project\Target_1\SPI_LED_Driver_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image D:\STM32\Test\Examples\MG32F02A128\MG32F02U128\SPI_LED_Driver_Project\out\SPI_LED_Driver_Project\Target_1\SPI_LED_Driver_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Fri Jan 12 16:10:13 2024
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; API_RGB_Init &rArr; API_RGBLed_Init &rArr; DMA_Base_Init &rArr; DMA_SetDestinationAddress
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[1e]">APX_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[c]">COMP_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[f]">DAC_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[d]">DMA_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[8]">EXINT0_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[9]">EXINT1_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[a]">EXINT2_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[b]">EXINT3_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[22]">HardFault_Handler_C</a> from system_MG32x02z.o(.text.HardFault_Handler_C) referenced from startup_MG32x02z.o(.text)
 <LI><a href="#[1b]">I2C0_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[1c]">I2Cx_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[0]">MG32x02z_IEC60730_MANAGER</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[19]">SPI0_IRQHandler</a> from MG32x02z_RGB_MBIA045_API.o(.text.SPI0_IRQHandler) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[1a]">SPIx_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[7]">SYS_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_MG32x02z.o(.text.SystemInit) referenced from startup_MG32x02z.o(.text)
 <LI><a href="#[10]">TM0x_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[11]">TM10_IRQHandler</a> from MG32x02z_RGB_API.o(.text.TM10_IRQHandler) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[12]">TM1x_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[13]">TM20_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[14]">TM2x_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[15]">TM3x_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[16]">URT0_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[17]">URT123_IRQHandler</a> from MG32x02z_RGB_MBIA045_API.o(.text.URT123_IRQHandler) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[18]">URT4x_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[1d]">USB_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[6]">WWDT_IRQHandler</a> from startup_MG32x02z.o(.text) referenced from startup_MG32x02z.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_MG32x02z.o(.text)
 <LI><a href="#[23]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1f]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[24]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[36]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[aa]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ab]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ac]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ad]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>MG32x02z_IEC60730_MANAGER</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>ReInitial_Stack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>APX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2Cx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPIx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SYS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TM0x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TM1x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TM20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TM2x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TM3x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>URT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>URT4x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MG32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_Init
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[b4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b5]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2c]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[b8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>API_AllRGB_OFF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, MG32x02z_RGB_API.o(.text.API_AllRGB_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_AllRGB_OFF &rArr; GPIO_SetPortBit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPortBit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT123_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[51]"></a>API_RGBLedControlParameter_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, MG32x02z_RGB_MBIA045_API.o(.text.API_RGBLedControlParameter_Init))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_ControlParameter_Init
</UL>

<P><STRONG><a name="[53]"></a>API_RGBLedDriverData_DeInit</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, MG32x02z_RGB_MBIA045_API.o(.text.API_RGBLedDriverData_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = API_RGBLedDriverData_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Data_DeInit
</UL>

<P><STRONG><a name="[3b]"></a>API_RGBLed_Init</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, MG32x02z_RGB_MBIA045_API.o(.text.API_RGBLed_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = API_RGBLed_Init &rArr; DMA_Base_Init &rArr; DMA_SetDestinationAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel_Cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_BaseInitStructure_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MBIA045_WriteConfiguration_Trigger
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MBIA045_EnableWriteConfiguration_Trigger
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_RXOverSamplingMode_Select
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_RXOverSamplingSampleNumber_Select
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_TXOverSamplingSampleNumber_Select
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_RXClockSource_Select
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_TXClockSource_Select
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_BaudRateGenerator_Cmd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_BaudRateGenerator_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Cmd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_TXInverse_Cmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_RX_Cmd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_TX_Cmd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_DataCharacter_Config
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_ITEA_Cmd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[50]"></a>API_RGB_ControlParameter_Init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, MG32x02z_RGB_API.o(.text.API_RGB_ControlParameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = API_RGB_ControlParameter_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLedControlParameter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[52]"></a>API_RGB_Data_DeInit</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, MG32x02z_RGB_API.o(.text.API_RGB_Data_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = API_RGB_Data_DeInit &rArr; API_RGBLedDriverData_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLedDriverData_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[54]"></a>API_RGB_Init</STRONG> (Thumb, 740 bytes, Stack size 112 bytes, MG32x02z_RGB_API.o(.text.API_RGB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = API_RGB_Init &rArr; API_RGBLed_Init &rArr; DMA_Base_Init &rArr; DMA_SetDestinationAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortMode_Config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ITEA_Cmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IT_Config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RepetitionCounterClock_Select
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RepetitionCounter_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ControlPWM_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_RepetitionCounter_Cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCC2B
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCC1B
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_CH2Function_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_CH1Function_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OC2NOutput_Cmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_InverseOC2N_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OC2OutputState_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OC10Output_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OC1zOutputState_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TRGIPrescaler_Select
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TRGICounter_Select
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TriggerSource_Select
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseStruct_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DeInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterDataOutIdleState_Select
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SlaveAsynchronous_Cmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ITEA_Cmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IT_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearFlag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IdleStateDataMode_Select
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LoopBackMode_Cmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataLineOutput_Cmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataLine_Select
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSize_Select
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SlaveModeReceivedThreshold_Select
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearTxData
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearRxData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FirstBit_Select
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClockPolarity_Select
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClockPhase_Select
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NssInputOutputSoftwareControl_Cmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ModeAndNss_Select
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Divider_Select
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Prescaler_Select
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PreDivider_Select
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Mode_Config
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_ControlParameter_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Data_DeInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AllRGB_OFF
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>API_RGB_Mode_Config</STRONG> (Thumb, 676 bytes, Stack size 36 bytes, MG32x02z_RGB_API.o(.text.API_RGB_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = API_RGB_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[97]"></a>API_RGB_UpdateDataTrigger</STRONG> (Thumb, 336 bytes, Stack size 20 bytes, MG32x02z_RGB_MBIA045_API.o(.text.API_RGB_UpdateDataTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = API_RGB_UpdateDataTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>CSC_IHRCO_Enable</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, MG32x02z_CSC_Init.o(.text.CSC_IHRCO_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_Init
</UL>

<P><STRONG><a name="[86]"></a>CSC_Init</STRONG> (Thumb, 576 bytes, Stack size 112 bytes, MG32x02z_CSC_Init.o(.text.CSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_IHRCO_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[89]"></a>ChipInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, MG32x02z_ChipInit.o(.text.ChipInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ChipInit &rArr; CSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>DMA_AutoIncreaseDestinationAddress</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_AutoIncreaseDestinationAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_AutoIncreaseDestinationAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[8e]"></a>DMA_AutoIncreaseSourceAddress</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_AutoIncreaseSourceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_AutoIncreaseSourceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[4c]"></a>DMA_BaseInitStructure_Init</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, MG32x02z_DMA_DRV.o(.text.DMA_BaseInitStructure_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_BaseInitStructure_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[4d]"></a>DMA_Base_Init</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, MG32x02z_DMA_DRV.o(.text.DMA_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_Base_Init &rArr; DMA_SetDestinationAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestinationAddress
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceAddress
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransferDataNumber
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetBurstSize
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Destination_Select
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Source_Select
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_AutoIncreaseDestinationAddress
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_AutoIncreaseSourceAddress
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LoopMode_Cmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetExtTriggerMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetExtTriggerPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[4b]"></a>DMA_Channel_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_Channel_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Channel_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[4a]"></a>DMA_Cmd</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, MG32x02z_DMA_DRV.o(.text.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[91]"></a>DMA_Destination_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_Destination_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Destination_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[8d]"></a>DMA_LoopMode_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_LoopMode_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_LoopMode_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[92]"></a>DMA_SetBurstSize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_SetBurstSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetBurstSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[95]"></a>DMA_SetDestinationAddress</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_SetDestinationAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetDestinationAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[8c]"></a>DMA_SetExtTriggerMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_SetExtTriggerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetExtTriggerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[8b]"></a>DMA_SetExtTriggerPin</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_SetExtTriggerPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetExtTriggerPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[94]"></a>DMA_SetSourceAddress</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_SetSourceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetSourceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[93]"></a>DMA_SetTransferDataNumber</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_SetTransferDataNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetTransferDataNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[90]"></a>DMA_Source_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_DMA_DRV.o(.text.DMA_Source_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Source_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Base_Init
</UL>

<P><STRONG><a name="[a0]"></a>GPIO_ClearPortBit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, MG32x02z_GPIO_DRV.o(.text.GPIO_ClearPortBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ClearPortBit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT123_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, MG32x02z_GPIO_Init.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[55]"></a>GPIO_PortMode_Config</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, MG32x02z_GPIO_DRV.o(.text.GPIO_PortMode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PortMode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[38]"></a>GPIO_SetPortBit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, MG32x02z_GPIO_DRV.o(.text.GPIO_SetPortBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetPortBit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AllRGB_OFF
</UL>

<P><STRONG><a name="[22]"></a>HardFault_Handler_C</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, system_MG32x02z.o(.text.HardFault_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardFault_Handler_C &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>SPI0_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, MG32x02z_RGB_MBIA045_API.o(.text.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPI_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[67]"></a>SPI_ClearRxData</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, MG32x02z_SPI_DRV.o(.text.SPI_ClearRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_ClearRxData
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[68]"></a>SPI_ClearTxData</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, MG32x02z_SPI_DRV.o(.text.SPI_ClearTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_ClearTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[5a]"></a>SPI_ClockPhase_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_ClockPhase_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_ClockPhase_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[5b]"></a>SPI_ClockPolarity_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_ClockPolarity_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_ClockPolarity_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[6a]"></a>SPI_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[60]"></a>SPI_DataLineOutput_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_DataLineOutput_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DataLineOutput_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[5e]"></a>SPI_DataLine_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_DataLine_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DataLine_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[5d]"></a>SPI_DataSize_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_DataSize_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DataSize_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[56]"></a>SPI_DeInit</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, MG32x02z_SPI_DRV.o(.text.SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[66]"></a>SPI_Divider_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_Divider_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Divider_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[5c]"></a>SPI_FirstBit_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_FirstBit_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_FirstBit_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[6c]"></a>SPI_ITEA_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_ITEA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_ITEA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[6b]"></a>SPI_IT_Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, MG32x02z_SPI_DRV.o(.text.SPI_IT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_IT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[62]"></a>SPI_IdleStateDataMode_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_IdleStateDataMode_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_IdleStateDataMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[5f]"></a>SPI_LoopBackMode_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_LoopBackMode_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_LoopBackMode_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[63]"></a>SPI_MasterDataOutIdleState_Select</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_MasterDataOutIdleState_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_MasterDataOutIdleState_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[57]"></a>SPI_ModeAndNss_Select</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_ModeAndNss_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_ModeAndNss_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[58]"></a>SPI_NssInputOutputSoftwareControl_Cmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_NssInputOutputSoftwareControl_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_NssInputOutputSoftwareControl_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[64]"></a>SPI_PreDivider_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_PreDivider_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_PreDivider_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[65]"></a>SPI_Prescaler_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_Prescaler_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Prescaler_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[59]"></a>SPI_SlaveAsynchronous_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_SlaveAsynchronous_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SlaveAsynchronous_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[61]"></a>SPI_SlaveModeReceivedThreshold_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_SPI_DRV.o(.text.SPI_SlaveModeReceivedThreshold_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SlaveModeReceivedThreshold_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_MG32x02z.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>TM10_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, MG32x02z_RGB_API.o(.text.TM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TM10_IRQHandler &rArr; API_RGB_UpdateDataTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_UpdateDataTrigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TM_CH1Function_Config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, MG32x02z_TM_DRV.o(.text.TM_CH1Function_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_CH1Function_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[75]"></a>TM_CH2Function_Config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, MG32x02z_TM_DRV.o(.text.TM_CH2Function_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_CH2Function_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[83]"></a>TM_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[80]"></a>TM_ControlPWM_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_ControlPWM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_ControlPWM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[9b]"></a>TM_CounterClock_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_CounterClock_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_CounterClock_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
</UL>

<P><STRONG><a name="[99]"></a>TM_Counter_Config</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, MG32x02z_TM_DRV.o(.text.TM_Counter_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_Counter_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
</UL>

<P><STRONG><a name="[6e]"></a>TM_DeInit</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, MG32x02z_TM_DRV.o(.text.TM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[85]"></a>TM_ITEA_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_ITEA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_ITEA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[84]"></a>TM_IT_Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, MG32x02z_TM_DRV.o(.text.TM_IT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_IT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[78]"></a>TM_InverseOC2N_Cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, MG32x02z_TM_DRV.o(.text.TM_InverseOC2N_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_InverseOC2N_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[7b]"></a>TM_OC10Output_Cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, MG32x02z_TM_DRV.o(.text.TM_OC10Output_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_OC10Output_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[76]"></a>TM_OC1zOutputState_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, MG32x02z_TM_DRV.o(.text.TM_OC1zOutputState_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_OC1zOutputState_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[7c]"></a>TM_OC2NOutput_Cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, MG32x02z_TM_DRV.o(.text.TM_OC2NOutput_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_OC2NOutput_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[77]"></a>TM_OC2OutputState_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, MG32x02z_TM_DRV.o(.text.TM_OC2OutputState_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_OC2OutputState_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[9c]"></a>TM_PrescalerClock_Select</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_PrescalerClock_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_PrescalerClock_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
</UL>

<P><STRONG><a name="[98]"></a>TM_Prescaler_Config</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, MG32x02z_TM_DRV.o(.text.TM_Prescaler_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_Prescaler_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
</UL>

<P><STRONG><a name="[7d]"></a>TM_RepetitionCounterClock_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_RepetitionCounterClock_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_RepetitionCounterClock_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[7f]"></a>TM_RepetitionCounter_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_RepetitionCounter_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_RepetitionCounter_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[7e]"></a>TM_RepetitionCounter_Config</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, MG32x02z_TM_DRV.o(.text.TM_RepetitionCounter_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_RepetitionCounter_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[79]"></a>TM_SetCC1B</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_SetCC1B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_SetCC1B
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[7a]"></a>TM_SetCC2B</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_SetCC2B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_SetCC2B
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[9e]"></a>TM_SetCounterDirection</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_SetCounterDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_SetCounterDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
</UL>

<P><STRONG><a name="[9d]"></a>TM_SetInternalClockDivider</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_SetInternalClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_SetInternalClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
</UL>

<P><STRONG><a name="[9f]"></a>TM_SetPrescalerDirection</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_SetPrescalerDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_SetPrescalerDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
</UL>

<P><STRONG><a name="[72]"></a>TM_TRGICounter_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_TRGICounter_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_TRGICounter_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[73]"></a>TM_TRGIPrescaler_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_TRGIPrescaler_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_TRGIPrescaler_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[6f]"></a>TM_TimeBaseStruct_Init</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, MG32x02z_TM_DRV.o(.text.TM_TimeBaseStruct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TM_TimeBaseStruct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[70]"></a>TM_TimeBase_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, MG32x02z_TM_DRV.o(.text.TM_TimeBase_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TM_TimeBase_Init &rArr; TM_Counter_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetPrescalerDirection
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCounterDirection
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetInternalClockDivider
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_PrescalerClock_Select
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_CounterClock_Select
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimerMode_Select
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Counter_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Prescaler_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[9a]"></a>TM_TimerMode_Select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_TimerMode_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_TimerMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
</UL>

<P><STRONG><a name="[81]"></a>TM_Timer_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_Timer_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_Timer_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[71]"></a>TM_TriggerSource_Select</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, MG32x02z_TM_DRV.o(.text.TM_TriggerSource_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_TriggerSource_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[17]"></a>URT123_IRQHandler</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, MG32x02z_RGB_MBIA045_API.o(.text.URT123_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = URT123_IRQHandler &rArr; API_MBIA045_GlobalLatch_Trigger &rArr; URT_ITEA_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPortBit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MBIA045_GlobalLatch_Trigger
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AllRGB_OFF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MG32x02z.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>URT_BaudRateGenerator_Cmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, MG32x02z_URT_DRV.o(.text.URT_BaudRateGenerator_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = URT_BaudRateGenerator_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[3c]"></a>URT_BaudRateGenerator_Config</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, MG32x02z_URT_DRV.o(.text.URT_BaudRateGenerator_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = URT_BaudRateGenerator_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[49]"></a>URT_Cmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, MG32x02z_URT_DRV.o(.text.URT_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[45]"></a>URT_DataCharacter_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, MG32x02z_URT_DRV.o(.text.URT_DataCharacter_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = URT_DataCharacter_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[3a]"></a>URT_ITEA_Cmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, MG32x02z_URT_DRV.o(.text.URT_ITEA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URT_ITEA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_MBIA045_GlobalLatch_Trigger
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[47]"></a>URT_IT_Config</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, MG32x02z_URT_DRV.o(.text.URT_IT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URT_IT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[3f]"></a>URT_RXClockSource_Select</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, MG32x02z_URT_DRV.o(.text.URT_RXClockSource_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = URT_RXClockSource_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[42]"></a>URT_RXOverSamplingMode_Select</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, MG32x02z_URT_DRV.o(.text.URT_RXOverSamplingMode_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URT_RXOverSamplingMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[41]"></a>URT_RXOverSamplingSampleNumber_Select</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, MG32x02z_URT_DRV.o(.text.URT_RXOverSamplingSampleNumber_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URT_RXOverSamplingSampleNumber_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[44]"></a>URT_RX_Cmd</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, MG32x02z_URT_DRV.o(.text.URT_RX_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URT_RX_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[3e]"></a>URT_TXClockSource_Select</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, MG32x02z_URT_DRV.o(.text.URT_TXClockSource_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = URT_TXClockSource_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[46]"></a>URT_TXInverse_Cmd</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, MG32x02z_URT_DRV.o(.text.URT_TXInverse_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URT_TXInverse_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[40]"></a>URT_TXOverSamplingSampleNumber_Select</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, MG32x02z_URT_DRV.o(.text.URT_TXOverSamplingSampleNumber_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URT_TXOverSamplingSampleNumber_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[43]"></a>URT_TX_Cmd</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, MG32x02z_URT_DRV.o(.text.URT_TX_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URT_TX_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; API_RGB_Init &rArr; API_RGBLed_Init &rArr; DMA_Base_Init &rArr; DMA_SetDestinationAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_UpdateDataTrigger
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a1]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bb]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bc]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bd]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[96]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[33]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[be]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[bf]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[23]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, MG32x02z_RGB_API.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGB_Init
</UL>

<P><STRONG><a name="[48]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, MG32x02z_RGB_MBIA045_API.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[4e]"></a>API_MBIA045_EnableWriteConfiguration_Trigger</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, MG32x02z_RGB_MBIA045_API.o(.text.API_MBIA045_EnableWriteConfiguration_Trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[4f]"></a>API_MBIA045_WriteConfiguration_Trigger</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, MG32x02z_RGB_MBIA045_API.o(.text.API_MBIA045_WriteConfiguration_Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_MBIA045_WriteConfiguration_Trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RGBLed_Init
</UL>

<P><STRONG><a name="[39]"></a>API_MBIA045_GlobalLatch_Trigger</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, MG32x02z_RGB_MBIA045_API.o(.text.API_MBIA045_GlobalLatch_Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = API_MBIA045_GlobalLatch_Trigger &rArr; URT_ITEA_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_ITEA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT123_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a2]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[a6]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a5]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
